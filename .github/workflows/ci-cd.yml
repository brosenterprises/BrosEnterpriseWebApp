name: 🚀 CI/CD Pipeline - Bros Enterprises

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

jobs:
  # 🧪 Testing and Quality Checks
  test:
    name: 🧪 Test & Quality Checks
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: 📥 Install dependencies
      run: |
        npm ci
        npm run install:all
    
    - name: 🔍 Run linting
      run: npm run lint
    
    - name: 🧪 Run tests
      run: npm run test
    
    - name: 📱 Test mobile responsiveness
      run: npm run test:mobile || true
    
    - name: 🏗️ Build applications
      run: npm run build
    
    - name: 📊 Generate build report
      run: |
        echo "Build completed successfully" > build-report.txt
        echo "Frontend build size:" >> build-report.txt
        du -sh frontend/dist >> build-report.txt
    
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ matrix.node-version }}
        path: |
          frontend/dist
          build-report.txt

  # 🔒 Security Audit
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📥 Install dependencies
      run: npm ci
    
    - name: 🔒 Run security audit
      run: |
        npm audit --audit-level high
        cd frontend && npm audit --audit-level high || true
        cd ../backend && npm audit --audit-level high || true
    
    - name: 🔍 Check for vulnerabilities
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: 📊 Security report
      run: |
        echo "Security audit completed" > security-report.txt
        npm audit --json > security-audit.json || true
    
    - name: 📤 Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: |
          security-report.txt
          security-audit.json

  # 🚀 Performance Testing
  performance:
    name: 🚀 Performance Testing
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📥 Install dependencies
      run: |
        npm ci
        cd frontend && npm ci
    
    - name: 🏗️ Build frontend
      run: cd frontend && npm run build
    
    - name: 🚀 Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
    
    - name: 📊 Run Lighthouse CI
      run: |
        cd frontend
        lhci autorun || true
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # 🐳 Docker Build (for local development)
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: secrets.DOCKER_USERNAME != ''
    
    - name: 🏗️ Build Docker images
      run: |
        docker-compose build
        echo "Docker images built successfully"
    
    - name: 📤 Push Docker images
      run: |
        if [ "${{ secrets.DOCKER_USERNAME }}" != "" ]; then
          docker-compose push
          echo "Docker images pushed successfully"
        else
          echo "Docker credentials not configured, skipping push"
        fi

  # 🌐 Deploy to Netlify
  deploy-netlify:
    name: 🌐 Deploy to Netlify
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📥 Install dependencies
      run: |
        npm ci
        cd frontend && npm ci
    
    - name: 🏗️ Build frontend for production
      run: cd frontend && npm run build
      env:
        NODE_ENV: production
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
        VITE_BUSINESS_PHONE: ${{ secrets.VITE_BUSINESS_PHONE }}
        VITE_BUSINESS_EMAIL: ${{ secrets.VITE_BUSINESS_EMAIL }}
        VITE_WHATSAPP_NUMBER: ${{ secrets.VITE_WHATSAPP_NUMBER }}
        VITE_GOOGLE_ANALYTICS_ID: ${{ secrets.VITE_GOOGLE_ANALYTICS_ID }}
    
    - name: 📊 Build size analysis
      run: |
        echo "📊 Build Analysis Report" > build-analysis.txt
        echo "=========================" >> build-analysis.txt
        echo "Build directory size:" >> build-analysis.txt
        du -sh frontend/dist >> build-analysis.txt
        echo "" >> build-analysis.txt
        echo "File breakdown:" >> build-analysis.txt
        find frontend/dist -type f -name "*.js" -exec du -h {} + | sort -hr >> build-analysis.txt
        echo "" >> build-analysis.txt
        echo "CSS files:" >> build-analysis.txt
        find frontend/dist -type f -name "*.css" -exec du -h {} + | sort -hr >> build-analysis.txt
    
    - name: 🌐 Deploy to Netlify
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: './frontend/dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "🚀 Deploy from GitHub Actions - ${{ github.event.head_commit.message }}"
        enable-pull-request-comment: true
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
    
    - name: 📤 Upload build analysis
      uses: actions/upload-artifact@v3
      with:
        name: build-analysis
        path: build-analysis.txt

  # 📱 Mobile Testing (Post-deployment)
  mobile-testing:
    name: 📱 Mobile Testing
    runs-on: ubuntu-latest
    needs: [deploy-netlify]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: 🚀 Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
    
    - name: 📱 Mobile Performance Test
      run: |
        lhci healthcheck --url https://${{ secrets.NETLIFY_SITE_ID }}.netlify.app
        lhci collect --url https://${{ secrets.NETLIFY_SITE_ID }}.netlify.app --settings.chromeFlags="--no-sandbox"
      continue-on-error: true

  # 📊 Deployment Summary
  deployment-summary:
    name: 📊 Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-netlify, mobile-testing]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📊 Create deployment summary
      run: |
        echo "# 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🌐 Live Site" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: https://${{ secrets.NETLIFY_SITE_ID }}.netlify.app" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ needs.deploy-netlify.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📱 Mobile Testing" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ needs.mobile-testing.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [🏠 Home Page](https://${{ secrets.NETLIFY_SITE_ID }}.netlify.app)" >> $GITHUB_STEP_SUMMARY
        echo "- [📱 Mobile View](https://${{ secrets.NETLIFY_SITE_ID }}.netlify.app?mobile=true)" >> $GITHUB_STEP_SUMMARY
        echo "- [📊 Netlify Dashboard](https://app.netlify.com/sites/${{ secrets.NETLIFY_SITE_ID }})" >> $GITHUB_STEP_SUMMARY
